name: Native Build and Package for Multiple Architectures

on:
  push:
    tags:
      - "v*"  # Trigger on version tags (e.g., v1.0.0)

jobs:
  ubuntu-x86_64-build:
    name: Build on Ubuntu x86_64
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Add Target
        run: rustup target add x86_64-unknown-linux-gnu

      - name: Build for x86_64
        run: |
          mkdir -p dist/x86_64
          cargo build --release --target x86_64-unknown-linux-gnu
          cp target/x86_64-unknown-linux-gnu/release/excalivator-client dist/x86_64/

      - name: Package Binary
        run: |
          tar -czvf dist/excalivator-client-linux-x86_64.tar.gz -C dist/x86_64 excalivator-client

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-x86_64-binary
          path: dist/

  ubuntu-aarch64-build:
    name: Build on Emulated ARM64 Ubuntu
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: aarch64

      - name: Build Inside ARM64 Docker
        run: |
          docker run --rm --platform linux/arm64 -v $(pwd):/app -w /app arm64v8/ubuntu:latest bash -c "
            apt-get update &&
            apt-get install -y build-essential curl libssl-dev pkg-config &&
            curl https://sh.rustup.rs -sSf | sh -s -- -y &&
            . "$HOME/.cargo/env" &&
            rustup target add aarch64-unknown-linux-gnu &&
            cargo build --release --target aarch64-unknown-linux-gnu
          "

      - name: Copy Build to Host
        run: |
          mkdir -p dist/aarch64
          cp target/aarch64-unknown-linux-gnu/release/excalivator-client dist/aarch64/

      - name: Package Binary
        run: |
          tar -czvf dist/excalivator-client-linux-aarch64.tar.gz -C dist/aarch64 excalivator-client

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-aarch64-binary
          path: dist/

  windows-build:
    name: Build on Windows (x86_64 only)
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Add Target
        run: rustup target add x86_64-pc-windows-msvc

      - name: Build for x86_64
        run: |
          mkdir -p dist
          cargo build --release
          cp target\\release\\excalivator-client.exe dist\\
          tar -czvf dist\\excalivator-client-windows-x86_64.tar.gz -C dist excalivator-client.exe

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-x86_64-binary
          path: dist/

  macos-build:
    name: Build on macOS (x86_64 and aarch64)
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Add Targets
        run: |
          rustup target add x86_64-apple-darwin aarch64-apple-darwin

      - name: Build for x86_64
        run: |
          mkdir -p dist/x86_64
          cargo build --release --target x86_64-apple-darwin
          cp target/x86_64-apple-darwin/release/excalivator-client dist/x86_64/

      - name: Build for aarch64
        run: |
          mkdir -p dist/aarch64
          cargo build --release --target aarch64-apple-darwin
          cp target/aarch64-apple-darwin/release/excalivator-client dist/aarch64/

      - name: Package Binaries
        run: |
          tar -czvf dist/excalivator-client-macos-x86_64.tar.gz -C dist/x86_64 excalivator-client
          tar -czvf dist/excalivator-client-macos-aarch64.tar.gz -C dist/aarch64 excalivator-client

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos-binaries
          path: dist/

  create-release:
    needs: [ ubuntu-x86_64-build, ubuntu-aarch64-build, windows-build, macos-build ]
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/*
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/gzip