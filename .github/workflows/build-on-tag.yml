name: Native Build and Package for Multiple Architectures

on:
  push:
    tags:
      - "v*"  # Trigger on version tags (e.g., v1.0.0)

jobs:
  ubuntu-x86_64-build:
    name: Build on Ubuntu x86_64
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Add Target
        run: rustup target add x86_64-unknown-linux-gnu

      - name: Build for x86_64
        run: |
          mkdir -p dist/x86_64
          cargo build --release --target x86_64-unknown-linux-gnu
          cp target/x86_64-unknown-linux-gnu/release/excalivator-client dist/x86_64/

      - name: Package Binary
        run: |
          tar -czvf dist/excalivator-client-linux-x86_64.tar.gz -C dist/x86_64 excalivator-client

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-x86_64-binary
          path: dist/

  create-release:
    needs: [ ubuntu-x86_64-build ]
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -R

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in ubuntu-x86_64-binary/* ubuntu-aarch64-binary/* windows-x86_64-binary/* macos-binaries/*; do
            if [[ -f "$file" ]]; then
              echo "Uploading $file"
              curl -H "Authorization: token $GITHUB_TOKEN" \
                   -H "Content-Type: $(file -b --mime-type $file)" \
                   --data-binary @"$file" \
                   "${{ steps.create_release.outputs.upload_url }}?name=$(basename $file)"
            fi
          done